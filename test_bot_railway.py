#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –±–æ—Ç–∞ –¥–ª—è Railway –¥–µ–ø–ª–æ—è
"""

import os
import sys
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
    try:
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è Railway —Ä–µ–∂–∏–º–∞
        os.environ["RAILWAY_STATIC_URL"] = "test"
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
        import config_railway as config
        logger.info("‚úÖ config_railway –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        from database import DatabaseManager, DatabaseCache, DatabaseRequestTracker
        logger.info("‚úÖ database –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        from historical_data import HistoricalDataManager
        logger.info("‚úÖ historical_data –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        from youtube_stats_db import DatabaseYouTubeStats
        logger.info("‚úÖ youtube_stats_db –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        from request_tracker_db import DatabaseRequestTrackerExtended
        logger.info("‚úÖ request_tracker_db –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        logger.info("‚úÖ –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def test_config():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    try:
        logger.info("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        os.environ["TELEGRAM_TOKEN"] = "test_token"
        os.environ["YOUTUBE_API_KEY"] = "test_api_key"
        os.environ["ADMIN_ID"] = "250800600"
        
        import config_railway as config
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        assert hasattr(config, 'TELEGRAM_TOKEN')
        assert hasattr(config, 'YOUTUBE_API_KEY')
        assert hasattr(config, 'ADMIN_ID')
        assert hasattr(config, 'CHANNELS')
        assert hasattr(config, 'DATABASE_PATH')
        
        logger.info(f"‚úÖ TELEGRAM_TOKEN: {'Set' if config.TELEGRAM_TOKEN else 'Not set'}")
        logger.info(f"‚úÖ YOUTUBE_API_KEY: {'Set' if config.YOUTUBE_API_KEY else 'Not set'}")
        logger.info(f"‚úÖ ADMIN_ID: {config.ADMIN_ID}")
        logger.info(f"‚úÖ –ö–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {len(config.CHANNELS)}")
        logger.info(f"‚úÖ DATABASE_PATH: {config.DATABASE_PATH}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_database():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        logger.info("üíæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        from database import DatabaseManager
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ë–î
        test_db_path = "/tmp/test_youtube_tracker.db"
        db = DatabaseManager(test_db_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–î
        stats = db.get_database_stats()
        logger.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞, –≤–µ—Ä—Å–∏—è —Å—Ö–µ–º—ã: {stats.get('schema_version', 'Unknown')}")
        logger.info(f"‚úÖ –†–∞–∑–º–µ—Ä –ë–î: {stats.get('file_size_mb', 0)} –ú–ë")
        
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ë–î
        import os
        if os.path.exists(test_db_path):
            os.remove(test_db_path)
            
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def test_bot_initialization():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–æ—Ç–∞"""
    try:
        logger.info("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞...")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        os.environ["TELEGRAM_TOKEN"] = "test_token"
        os.environ["YOUTUBE_API_KEY"] = "test_api_key"
        
        from youtube_stats_db import DatabaseYouTubeStats
        from request_tracker_db import DatabaseRequestTrackerExtended
        from database import DatabaseManager
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ë–î –¥–ª—è —Ç–µ—Å—Ç–∞
        test_db_path = "/tmp/test_bot_youtube_tracker.db"
        db_manager = DatabaseManager(test_db_path)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        youtube_stats = DatabaseYouTubeStats(test_db_path)
        request_tracker = DatabaseRequestTrackerExtended(db_manager)
        
        logger.info("‚úÖ YouTubeStats –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info("‚úÖ RequestTracker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ë–î
        import os
        if os.path.exists(test_db_path):
            os.remove(test_db_path)
            
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Railway –¥–µ–ø–ª–æ—è")
    logger.info("=" * 50)
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç—ã", test_imports),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_config),
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", test_database),
        ("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞", test_bot_initialization)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        logger.info(f"\nüß™ –¢–µ—Å—Ç: {test_name}")
        logger.info("-" * 30)
        
        if test_func():
            passed += 1
            logger.info(f"‚úÖ {test_name}: –ü–†–û–®–ï–õ")
        else:
            logger.error(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ò–õ–°–Ø")
    
    logger.info("\n" + "=" * 50)
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    
    if passed == total:
        logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Railway.")
        return True
    else:
        logger.error(f"‚ùå {total - passed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å. –ù–µ–æ–±—Ö–æ–¥–∏–º—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
