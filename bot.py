import logging
from datetime import datetime, timedelta, timezone
import sys
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters
import config
from youtube_stats import YouTubeStats
from request_tracker import RequestTracker
from channel_manager import channel_manager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª: –ø–æ @username –∏–ª–∏ –ø–æ channel_id
def build_channel_link(channel: dict) -> str:
    channel_username = channel.get('username', '') or ''
    channel_id = channel.get('channel_id', '') or ''
    
    if channel_username:
        # –û—á–∏—â–∞–µ–º username –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ URL
        clean_username = channel_username.strip()
        
        # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ –ø–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if clean_username.startswith('https://www.youtube.com/'):
            return clean_username
        
        # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
        if clean_username.startswith('@'):
            clean_username = clean_username[1:]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ username –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        if clean_username and not clean_username.startswith('http'):
            return f"https://www.youtube.com/@{clean_username}"
    
    if channel_id:
        return f"https://www.youtube.com/channel/{channel_id}"
    
    return ""

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
try:
    logger.info("Starting YouTube Stats Bot for Railway...")
    logger.info(f"Telegram Token: {'Set' if config.TELEGRAM_TOKEN else 'Not set'}")
    logger.info(f"YouTube API Key: {'Set' if config.YOUTUBE_API_KEY else 'Not set'}")
    logger.info(f"Admin ID: {config.ADMIN_ID}")
    logger.info(f"Channels to monitor: {len(config.CHANNELS)}")
except Exception as e:
    logger.error(f"Configuration error: {e}")
    sys.exit(1)

def get_error_message(e):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
    error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
    error_str = str(e).lower()
    
    if "quotaexceeded" in error_str or "quota exceeded" in error_str:
        error_message = "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ YouTube API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    elif "accessnotconfigured" in error_str or "access not configured" in error_str:
        error_message = "YouTube API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–∞."
    elif "403" in error_str or "forbidden" in error_str:
        error_message = "–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ YouTube API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á."
    elif "400" in error_str or "bad request" in error_str:
        error_message = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ YouTube API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
    elif "500" in error_str or "internal server error" in error_str:
        error_message = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ YouTube API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    elif "network" in error_str or "connection" in error_str:
        error_message = "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ YouTube API."
    elif "timeout" in error_str:
        error_message = "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç YouTube API."
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.error(f"Detailed error: {e}")
    return error_message

class YouTubeStatsBot:
    def __init__(self):
        self.youtube_stats = YouTubeStats()
        self.request_tracker = RequestTracker()
        # –ö—ç—à –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        self._main_menu_cache = {}
        self._cache_timeout = 3600  # 1 —á–∞—Å
        logger.info("YouTubeStatsBot initialized for Railway")
    
    def _get_cached_main_menu(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        import time
        if 'data' in self._main_menu_cache:
            timestamp, data = self._main_menu_cache['data']
            if time.time() - timestamp < self._cache_timeout:
                logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é")
                return data
        return None
    
    def _set_cached_main_menu(self, data):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –≤ –∫—ç—à"""
        import time
        self._main_menu_cache['data'] = (time.time(), data)
        logger.info("–î–∞–Ω–Ω—ã–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à")
    
    def _clear_main_menu_cache(self):
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        self._main_menu_cache.clear()
        logger.info("–ö—ç—à –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –æ—á–∏—â–µ–Ω")
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
        can_request, message_text = self.request_tracker.can_make_request(user_id)
        if not can_request:
            await update.message.reply_text(f"‚ö†Ô∏è {message_text}")
            return
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cached_data = self._get_cached_main_menu()
            if cached_data:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                message = cached_data['message']
                reply_markup = cached_data['reply_markup']
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
                self.request_tracker.record_request(user_id, "start")
                
                await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown', disable_web_page_preview=True)
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
            loading_message = await update.message.reply_text("üìä –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–Ω–∞–ª–∞–º
            summary_stats = self.youtube_stats.get_summary_stats()
            today_video_stats = self.youtube_stats.get_today_video_stats()
            detailed_stats = self.youtube_stats.get_detailed_channel_stats()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_stats = self.request_tracker.get_user_stats(user_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–≤–æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            message = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–º –∫–∞–Ω–∞–ª–∞–º:**\n\n"
            now_utc = datetime.now(timezone.utc)
            today_start = now_utc.replace(hour=0, minute=0, second=0, microsecond=0)
            yesterday_date = (today_start - timedelta(days=1)).date()
            
            # –ù–µ–¥–µ–ª—è —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
            current_weekday = now_utc.weekday()  # 0=–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 6=–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
            week_start_date = (today_start - timedelta(days=current_weekday)).date()
            week_end_date = week_start_date + timedelta(days=6)
            message += (
                f"–ó–∞ —Å–µ–≥–æ–¥–Ω—è: {summary_stats['today']['views']:,}üëÅÔ∏è | "
                f"{summary_stats['today']['likes']:,}üëç | {summary_stats['today']['comments']:,}üí¨ | "
                f"+{summary_stats['today'].get('subs_gain', 0):,}üë§ | {summary_stats['today'].get('video_count', 0):,}üé¨\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ –æ –ª–æ–≥–∏–∫–µ –ø–æ–¥—Å—á–µ—Ç–∞
            if summary_stats['today']['views'] == 0:
                message += "‚ÑπÔ∏è *–ü–æ–∫–∞–∑–∞–Ω—ã –≤–∏–¥–µ–æ, –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è*\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–Ω–∞–ª–∞–º –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            for channel_data in detailed_stats['today']:
                message += (
                    f"‚Ä¢ {channel_data['channel_name']}: {channel_data['views']:,}üëÅÔ∏è | "
                    f"{channel_data['likes']:,}üëç | {channel_data['comments']:,}üí¨\n"
                )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—á–µ—Ä–∞
            if 'yesterday' in summary_stats and summary_stats['yesterday']:
                message += (
                    f"\n–ó–∞ –≤—á–µ—Ä–∞ (UTC {yesterday_date}): {summary_stats['yesterday']['views']:,}üëÅÔ∏è | "
                    f"{summary_stats['yesterday']['likes']:,}üëç | {summary_stats['yesterday']['comments']:,}üí¨ | "
                    f"+{summary_stats['yesterday'].get('subs_gain', 0):,}üë§ | {summary_stats['yesterday'].get('video_count', 0):,}üé¨\n"
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–Ω–∞–ª–∞–º –∑–∞ –≤—á–µ—Ä–∞
                if 'yesterday' in detailed_stats and detailed_stats['yesterday']:
                    for channel_data in detailed_stats['yesterday']:
                        message += (
                            f"‚Ä¢ {channel_data['channel_name']}: {channel_data['views']:,}üëÅÔ∏è | "
                            f"{channel_data['likes']:,}üëç | {channel_data['comments']:,}üí¨\n"
                        )
            else:
                message += f"\n–ó–∞ –≤—á–µ—Ä–∞: –î–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n"
            
            message += (
                f"\n–ó–∞ –Ω–µ–¥–µ–ª—é (UTC {week_start_date} ‚Äî {week_end_date}): {summary_stats['week']['views']:,}üëÅÔ∏è | "
                f"{summary_stats['week']['likes']:,}üëç | {summary_stats['week']['comments']:,}üí¨ | "
                f"+{summary_stats['week'].get('subs_gain', 0):,}üë§ | {summary_stats['week'].get('video_count', 0):,}üé¨\n"
            )
            message += (
                f"–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è: {summary_stats['all_time']['views']:,}üëÅÔ∏è | "
                f"{summary_stats['all_time']['likes']:,}üëç | {summary_stats['all_time']['comments']:,}üí¨ | "
                f"{summary_stats['all_time'].get('subscribers', 0):,}üë§ | {summary_stats['all_time'].get('videos', 0):,}üé¨\n\n"
            )
            channels = channel_manager.get_channels()
            message += f"–ö–∞–Ω–∞–ª–æ–≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è: {len(channels)}\n\n"
            
            # –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –ø—Ä–æ—Å—å–±–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ —Å –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞–º–∏
            channel_links = []
            for channel in channels:
                channel_name = channel['name']
                channel_link = build_channel_link(channel)
                if channel_link:
                    channel_links.append(f"[{channel_name}]({channel_link})")
                else:
                    channel_links.append(channel_name)
            
            message += f"({', '.join(channel_links)})"
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏
            keyboard = [
                [
                    InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="add_channel"),
                    InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="remove_channel")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
            self.request_tracker.record_request(user_id, "start")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            self._set_cached_main_menu({
                'message': message,
                'reply_markup': reply_markup
            })
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await loading_message.delete()
            await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown', disable_web_page_preview=True)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            # –£–¥–∞–ª—è–µ–º loading —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            try:
                if 'loading_message' in locals():
                    await loading_message.delete()
            except:
                pass
            await update.message.reply_text(get_error_message(e))
    
    async def stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
        
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
        can_request, message_text = self.request_tracker.can_make_request(user_id)
        if not can_request:
            await update.message.reply_text(f"‚ö†Ô∏è {message_text}")
            return
        
        await update.message.reply_text("–ü–æ–ª—É—á–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
        
        try:
            daily_stats = self.youtube_stats.get_daily_stats()
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
            self.request_tracker.record_request(user_id, "stats")
            
            if not daily_stats:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            message = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
            
            for channel_data in daily_stats:
                channel_name = channel_data['channel_name']
                channel_username = channel_data.get('channel_username', '')
                daily_views = channel_data['daily_views']
                daily_likes = channel_data['daily_likes']
                daily_comments = channel_data['daily_comments']
                videos = channel_data['videos']
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
                channel_link = ''
                if channel_username:
                    channel_link = f"https://www.youtube.com/{channel_username}"
                # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–±—Ä–∞—Ç—å —Å—Å—ã–ª–∫—É –ø–æ channel_id, –µ—Å–ª–∏ username –Ω–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö
                if not channel_link:
                    channel_id = channel_data.get('channel_id', '')
                    if channel_id:
                        channel_link = f"https://www.youtube.com/channel/{channel_id}"
                if channel_link:
                    message += f"üìä [{channel_name}]({channel_link}) - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n\n"
                else:
                    message += f"üìä {channel_name} - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–º—É –≤–∏–¥–µ–æ
                if videos:
                    message += f"üìπ –í–∏–¥–µ–æ ({len(videos)}):\n"
                    for i, video in enumerate(videos, 1):
                        title = video['title'][:40] + "..." if len(video['title']) > 40 else video['title']
                        message += f"{i}. {title} | {video['views']:,}üëÅÔ∏è {video['likes']:,}üëç {video['comments']:,}üí¨\n"
                    
                    message += f"\nüìà –ò—Ç–æ–≥–æ: {daily_views:,}üëÅÔ∏è {daily_likes:,}üëç {daily_comments:,}üí¨\n"
                else:
                    message += "üìπ –í–∏–¥–µ–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
                
                message += "\n" + "‚îÄ" * 30 + "\n\n"
            
            # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            if len(message) > 4096:
                parts = [message[i:i+4096] for i in range(0, len(message), 4096)]
                for part in parts:
                    await update.message.reply_text(part, parse_mode='Markdown', disable_web_page_preview=True)
            else:
                await update.message.reply_text(message, parse_mode='Markdown', disable_web_page_preview=True)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await update.message.reply_text(get_error_message(e))
    
    async def test_channels_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /test_channels - —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤"""
        user_id = update.effective_user.id
        
        # –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
        if user_id != config.ADMIN_ID:
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        try:
            message = "üîç **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤:**\n\n"
            
            for channel in config.CHANNELS:
                channel_name = channel['name']
                channel_id = channel.get('channel_id', '')
                username = channel.get('username', '')
                
                message += f"üì∫ **{channel_name}**\n"
                message += f"‚Ä¢ channel_id: `{channel_id or '–ù–ï–¢'}`\n"
                message += f"‚Ä¢ username: `{username or '–ù–ï–¢'}`\n"
                
                if not channel_id and username:
                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
                    resolved_id = self.youtube_stats._resolve_channel_id_by_username(username)
                    if resolved_id:
                        message += f"‚Ä¢ ‚úÖ –ù–∞–π–¥–µ–Ω: `{resolved_id}`\n"
                    else:
                        message += f"‚Ä¢ ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω\n"
                
                message += "\n"
            
            await update.message.reply_text(message, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–≤: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        
        help_text = """
ü§ñ **YouTube Analytics Bot**

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
/stats - –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
/test_channels - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ (–∞–¥–º–∏–Ω)
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∫–ª—é—á–∞–µ—Ç:**
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã, –ª–∞–π–∫–∏, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –∑–∞ –ø–µ—Ä–∏–æ–¥
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ –∫–∞–Ω–∞–ª–∞–º

**–í–∞–∂–Ω–æ:**
‚Ä¢ "–ó–∞ —Å–µ–≥–æ–¥–Ω—è/–≤—á–µ—Ä–∞" = –≤–∏–¥–µ–æ, –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å
‚Ä¢ –í—Ä–µ–º—è —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ UTC
‚Ä¢ –î–∞–Ω–Ω—ã–µ –∫—ç—à–∏—Ä—É—é—Ç—Å—è 30 –º–∏–Ω—É—Ç

**–õ–∏–º–∏—Ç—ã:**
‚Ä¢ 15 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ 2 –º–∏–Ω—É—Ç—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
‚Ä¢ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö 30 –º–∏–Ω—É—Ç

üöÄ **–†–∞–∑–≤–µ—Ä–Ω—É—Ç–æ –Ω–∞ Railway**
        """
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞–Ω–∞–ª–∞–º–∏)
        if user_id != config.ADMIN_ID:
            await query.edit_message_text("‚ùå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        if query.data == "add_channel":
            await self.show_add_channel_menu(query, context)
        elif query.data == "remove_channel":
            await self.show_remove_channel_menu(query, context)
        elif query.data.startswith("confirm_add_"):
            await self.confirm_add_channel(query, context)
        elif query.data.startswith("confirm_remove_"):
            await self.confirm_remove_channel(query, context)
        elif query.data == "back_to_main":
            await self.back_to_main_menu(query, context)
    
    async def show_add_channel_menu(self, query, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
        message = """
‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è**

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ:
1. **–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞** (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–ú–æ–π –∫–∞–Ω–∞–ª")
2. **Username –∫–∞–Ω–∞–ª–∞** (–Ω–∞–ø—Ä–∏–º–µ—Ä: @my_channel –∏–ª–∏ my_channel)
3. **Channel ID** (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–µ–Ω)

–ü—Ä–∏–º–µ—Ä:
```
–ù–∞–∑–≤–∞–Ω–∏–µ: –¢–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª
Username: @test_channel
```

–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ username –∫–∞–Ω–∞–ª–∞, –∏ —è –ø–æ–ø—Ä–æ–±—É—é –Ω–∞–π—Ç–∏ –µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
        """
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
        context.user_data['waiting_for_channel_info'] = True
        context.user_data['action'] = 'add_channel'
    
    async def show_remove_channel_menu(self, query, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
        channels = channel_manager.get_channels()
        
        if not channels:
            message = "‚ùå –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        else:
            message = "‚ûñ **–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
            
            keyboard = []
            for i, channel in enumerate(channels):
                channel_name = channel['name']
                keyboard.append([InlineKeyboardButton(
                    f"üóëÔ∏è {channel_name}", 
                    callback_data=f"confirm_remove_{i}"
                )])
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def confirm_add_channel(self, query, context):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞"""
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        await query.edit_message_text("‚úÖ –ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    
    async def confirm_remove_channel(self, query, context):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞"""
        channel_index = int(query.data.split("_")[-1])
        result = channel_manager.remove_channel(channel_index)
        
        if result['success']:
            # –û—á–∏—â–∞–µ–º –∫—ç—à –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é, —Ç–∞–∫ –∫–∞–∫ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑–º–µ–Ω–∏–ª—Å—è
            self._clear_main_menu_cache()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data="back_to_main")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(f"‚úÖ {result['message']}", reply_markup=reply_markup)
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data="back_to_main")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(f"‚ùå {result['message']}", reply_markup=reply_markup)
    
    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if user_id != config.ADMIN_ID:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        if not context.user_data.get('waiting_for_channel_info', False):
            return
        
        action = context.user_data.get('action')
        if action == 'add_channel':
            await self.process_channel_info(update, context)
    
    async def process_channel_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
        text = update.message.text.strip()
        
        try:
            # –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            channel_info = self.parse_channel_info(text)
            
            if not channel_info['name']:
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
                )
                return
            
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ channel_id –µ—Å–ª–∏ –æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω
            if not channel_info['channel_id'] and channel_info['username']:
                try:
                    resolved_id = self.youtube_stats._resolve_channel_id_by_username(channel_info['username'])
                    if resolved_id:
                        channel_info['channel_id'] = resolved_id
                        await update.message.reply_text(f"‚úÖ –ù–∞–π–¥–µ–Ω Channel ID: {resolved_id}")
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ channel_id –¥–ª—è {channel_info['username']}: {e}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª
            result = channel_manager.add_channel(
                name=channel_info['name'],
                username=channel_info['username'],
                channel_id=channel_info['channel_id']
            )
            
            if result['success']:
                # –û—á–∏—â–∞–µ–º –∫—ç—à –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é, —Ç–∞–∫ –∫–∞–∫ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑–º–µ–Ω–∏–ª—Å—è
                self._clear_main_menu_cache()
                
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
                context.user_data.pop('waiting_for_channel_info', None)
                context.user_data.pop('action', None)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞
                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data="back_to_main")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                message = f"‚úÖ {result['message']}\n\n"
                channel = result['channel']
                message += f"üì∫ **–ù–∞–∑–≤–∞–Ω–∏–µ:** {channel['name']}\n"
                if channel['username']:
                    message += f"üë§ **Username:** {channel['username']}\n"
                if channel['channel_id']:
                    message += f"üÜî **Channel ID:** {channel['channel_id']}\n"
                
                await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown')
            else:
                await update.message.reply_text(f"‚ùå {result['message']}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    def parse_channel_info(self, text: str) -> dict:
        """–ü–∞—Ä—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        channel_info = {
            'name': '',
            'username': '',
            'channel_id': ''
        }
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        text = re.sub(r'\s+', ' ', text.strip())
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        name_match = re.search(r'–Ω–∞–∑–≤–∞–Ω–∏–µ[:\s]+(.+?)(?:\n|$)', text, re.IGNORECASE)
        if name_match:
            channel_info['name'] = name_match.group(1).strip()
        
        username_match = re.search(r'username[:\s]+(.+?)(?:\n|$)', text, re.IGNORECASE)
        if username_match:
            channel_info['username'] = username_match.group(1).strip()
        
        channel_id_match = re.search(r'channel[_\s]*id[:\s]+(.+?)(?:\n|$)', text, re.IGNORECASE)
        if channel_id_match:
            channel_info['channel_id'] = channel_id_match.group(1).strip()
        
        # –ï—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        if not channel_info['name'] and not channel_info['username']:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç URL
            if text.startswith('https://www.youtube.com/'):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ URL
                if '/@' in text:
                    username_part = text.split('/@')[1]
                    if '/' in username_part:
                        username_part = username_part.split('/')[0]
                    channel_info['username'] = f"@{username_part}"
                    channel_info['name'] = username_part.replace('_', ' ').replace('-', ' ').title()
                else:
                    # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å channel ID
                    channel_info['channel_id'] = text.split('/')[-1]
                    channel_info['name'] = "–ö–∞–Ω–∞–ª"
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç username (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã/—Ü–∏—Ñ—Ä—ã/–ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è)
            elif re.match(r'^@?[a-zA-Z0-9_-]+$', text):
                channel_info['username'] = text
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ username
                clean_username = text.lstrip('@')
                channel_info['name'] = clean_username.replace('_', ' ').replace('-', ' ').title()
            else:
                # –°—á–∏—Ç–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞–Ω–∞–ª–∞
                channel_info['name'] = text
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ username, –Ω–æ –Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è
        if channel_info['username'] and not channel_info['name']:
            clean_username = channel_info['username'].lstrip('@')
            channel_info['name'] = clean_username.replace('_', ' ').replace('-', ' ').title()
        
        return channel_info
    
    async def back_to_main_menu(self, query, context):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é"""
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        context.user_data.pop('waiting_for_channel_info', None)
        context.user_data.pop('action', None)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cached_data = self._get_cached_main_menu()
            if cached_data:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                message = cached_data['message']
                reply_markup = cached_data['reply_markup']
                await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown', disable_web_page_preview=True)
                return
            
            summary_stats = self.youtube_stats.get_summary_stats()
            today_video_stats = self.youtube_stats.get_today_video_stats()
            detailed_stats = self.youtube_stats.get_detailed_channel_stats()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–≤–æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            message = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–º –∫–∞–Ω–∞–ª–∞–º:**\n\n"
            now_utc = datetime.now(timezone.utc)
            today_start = now_utc.replace(hour=0, minute=0, second=0, microsecond=0)
            yesterday_date = (today_start - timedelta(days=1)).date()
            
            # –ù–µ–¥–µ–ª—è —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
            current_weekday = now_utc.weekday()  # 0=–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 6=–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
            week_start_date = (today_start - timedelta(days=current_weekday)).date()
            week_end_date = week_start_date + timedelta(days=6)
            message += (
                f"–ó–∞ —Å–µ–≥–æ–¥–Ω—è: {summary_stats['today']['views']:,}üëÅÔ∏è | "
                f"{summary_stats['today']['likes']:,}üëç | {summary_stats['today']['comments']:,}üí¨ | "
                f"+{summary_stats['today'].get('subs_gain', 0):,}üë§ | {summary_stats['today'].get('video_count', 0):,}üé¨\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ –æ –ª–æ–≥–∏–∫–µ –ø–æ–¥—Å—á–µ—Ç–∞
            if summary_stats['today']['views'] == 0:
                message += "‚ÑπÔ∏è *–ü–æ–∫–∞–∑–∞–Ω—ã –≤–∏–¥–µ–æ, –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è*\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–Ω–∞–ª–∞–º –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            for channel_data in detailed_stats['today']:
                message += (
                    f"‚Ä¢ {channel_data['channel_name']}: {channel_data['views']:,}üëÅÔ∏è | "
                    f"{channel_data['likes']:,}üëç | {channel_data['comments']:,}üí¨\n"
                )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—á–µ—Ä–∞
            if 'yesterday' in summary_stats and summary_stats['yesterday']:
                message += (
                    f"\n–ó–∞ –≤—á–µ—Ä–∞ (UTC {yesterday_date}): {summary_stats['yesterday']['views']:,}üëÅÔ∏è | "
                    f"{summary_stats['yesterday']['likes']:,}üëç | {summary_stats['yesterday']['comments']:,}üí¨ | "
                    f"+{summary_stats['yesterday'].get('subs_gain', 0):,}üë§ | {summary_stats['yesterday'].get('video_count', 0):,}üé¨\n"
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–Ω–∞–ª–∞–º –∑–∞ –≤—á–µ—Ä–∞
                if 'yesterday' in detailed_stats and detailed_stats['yesterday']:
                    for channel_data in detailed_stats['yesterday']:
                        message += (
                            f"‚Ä¢ {channel_data['channel_name']}: {channel_data['views']:,}üëÅÔ∏è | "
                            f"{channel_data['likes']:,}üëç | {channel_data['comments']:,}üí¨\n"
                        )
            else:
                message += f"\n–ó–∞ –≤—á–µ—Ä–∞: –î–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n"
            
            message += (
                f"\n–ó–∞ –Ω–µ–¥–µ–ª—é (UTC {week_start_date} ‚Äî {week_end_date}): {summary_stats['week']['views']:,}üëÅÔ∏è | "
                f"{summary_stats['week']['likes']:,}üëç | {summary_stats['week']['comments']:,}üí¨ | "
                f"+{summary_stats['week'].get('subs_gain', 0):,}üë§ | {summary_stats['week'].get('video_count', 0):,}üé¨\n"
            )
            message += (
                f"–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è: {summary_stats['all_time']['views']:,}üëÅÔ∏è | "
                f"{summary_stats['all_time']['likes']:,}üëç | {summary_stats['all_time']['comments']:,}üí¨ | "
                f"{summary_stats['all_time'].get('subscribers', 0):,}üë§ | {summary_stats['all_time'].get('videos', 0):,}üé¨\n\n"
            )
            channels = channel_manager.get_channels()
            message += f"–ö–∞–Ω–∞–ª–æ–≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è: {len(channels)}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ —Å –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞–º–∏
            channel_links = []
            for channel in channels:
                channel_name = channel['name']
                channel_link = build_channel_link(channel)
                if channel_link:
                    channel_links.append(f"[{channel_name}]({channel_link})")
                else:
                    channel_links.append(channel_name)
            
            message += f"({', '.join(channel_links)})"
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏
            keyboard = [
                [
                    InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="add_channel"),
                    InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="remove_channel")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            self._set_cached_main_menu({
                'message': message,
                'reply_markup': reply_markup
            })
            
            await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown', disable_web_page_preview=True)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        logger.info("Initializing YouTube Stats Bot...")
        bot = YouTubeStatsBot()
        logger.info("Bot instance created successfully")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        logger.info("Creating Telegram application...")
        application = Application.builder().token(config.TELEGRAM_TOKEN).build()
        logger.info("Telegram application created successfully")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        logger.info("Adding command handlers...")
        application.add_handler(CommandHandler("start", bot.start))
        application.add_handler(CommandHandler("stats", bot.stats))
        application.add_handler(CommandHandler("test_channels", bot.test_channels_command))
        application.add_handler(CommandHandler("help", bot.help_command))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
        application.add_handler(CallbackQueryHandler(bot.handle_callback_query))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_text_message))
        
        logger.info("All handlers added successfully")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("Starting bot polling...")
        print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        application.run_polling(allowed_updates=Update.ALL_TYPES)
        
    except Exception as e:
        logger.error(f"Failed to start bot: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()
