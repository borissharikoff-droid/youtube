#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import os
import time
from datetime import datetime, timedelta
from database import DatabaseManager, DatabaseCache, DatabaseRequestTracker
from historical_data import HistoricalDataManager
from youtube_stats_db import DatabaseYouTubeStats
import config

def test_database_initialization():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ë–î –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    test_db = "test_youtube.db"
    if os.path.exists(test_db):
        os.remove(test_db)
    
    # –°–æ–∑–¥–∞–µ–º –ë–î
    db_manager = DatabaseManager(test_db)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    with db_manager.get_connection() as conn:
        cursor = conn.execute("""
            SELECT name FROM sqlite_master 
            WHERE type='table' AND name NOT LIKE 'sqlite_%'
            ORDER BY name
        """)
        tables = [row[0] for row in cursor.fetchall()]
    
    expected_tables = [
        'api_quota', 'cache', 'channels', 'channel_stats', 
        'comments', 'daily_channel_stats', 'events', 
        'schema_versions', 'trends', 'users', 'user_requests', 
        'videos', 'video_stats'
    ]
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
    print(f"   –û–∂–∏–¥–∞–ª–æ—Å—å: {len(expected_tables)}")
    
    missing = set(expected_tables) - set(tables)
    if missing:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã: {missing}")
    else:
        print("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é —Å—Ö–µ–º—ã
    stats = db_manager.get_database_stats()
    print(f"‚úÖ –í–µ—Ä—Å–∏—è —Å—Ö–µ–º—ã: {stats.get('schema_version', 'unknown')}")
    
    # –û—á–∏—â–∞–µ–º
    os.remove(test_db)
    return len(missing) == 0

def test_cache_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\nüíæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    test_db = "test_cache.db"
    if os.path.exists(test_db):
        os.remove(test_db)
    
    db_manager = DatabaseManager(test_db)
    cache = DatabaseCache(db_manager)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ
    test_data = {'test': 'value', 'number': 123}
    cache.set('test_key', test_data, 'test', ttl=60)
    
    retrieved = cache.get('test_key', 'test')
    if retrieved == test_data:
        print("‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è: {retrieved} != {test_data}")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º TTL
    cache.set('expire_key', {'fast': 'expire'}, 'test', ttl=1)
    time.sleep(1.1)
    expired = cache.get('expire_key', 'test')
    
    if expired is None:
        print("‚úÖ TTL –∫—ç—à–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print(f"‚ùå TTL –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: –ø–æ–ª—É—á–µ–Ω–æ {expired}")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = cache.get_stats()
    print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞: {stats['overall']['total']} –∑–∞–ø–∏—Å–µ–π")
    
    # –û—á–∏—â–∞–µ–º
    os.remove(test_db)
    return True

def test_request_tracker():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç—Ä–µ–∫–µ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–µ—Ä–∞ –∑–∞–ø—Ä–æ—Å–æ–≤...")
    
    test_db = "test_requests.db"
    if os.path.exists(test_db):
        os.remove(test_db)
    
    db_manager = DatabaseManager(test_db)
    tracker = DatabaseRequestTrackerExtended(db_manager)
    
    user_id = 12345
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ª–∏–º–∏—Ç–æ–≤
    can_request, message = tracker.can_make_request(user_id)
    if can_request:
        print("‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤: {message}")
        return False
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
    tracker.record_request(user_id, "test_request", api_quota_used=5)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = tracker.get_user_stats(user_id)
    if stats['requests_today'] == 1:
        print("‚úÖ –ó–∞–ø—Ä–æ—Å –∑–∞–ø–∏—Å–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∑–∞–ø—Ä–æ—Å–∞: {stats}")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    system_stats = tracker.get_system_stats()
    if system_stats['today']['total_requests'] >= 1:
        print("‚úÖ –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {system_stats}")
        return False
    
    # –û—á–∏—â–∞–µ–º
    os.remove(test_db)
    return True

def test_historical_data():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ"""
    print("\nüìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    test_db = "test_historical.db"
    if os.path.exists(test_db):
        os.remove(test_db)
    
    db_manager = DatabaseManager(test_db)
    historical = HistoricalDataManager(db_manager)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞
    channel_id = "UCtest123"
    channel_stats = {
        'subscribers': 1000,
        'total_views': 50000,
        'total_videos': 100
    }
    
    test_videos = [
        {
            'title': 'Test Video 1',
            'views': 1000,
            'likes': 50,
            'comments': 10,
            'published_at': datetime.now().isoformat(),
            'comment_list': [
                {'author': 'User1', 'text': 'Great video!'}
            ]
        },
        {
            'title': 'Test Video 2', 
            'views': 2000,
            'likes': 100,
            'comments': 20,
            'published_at': (datetime.now() - timedelta(hours=1)).isoformat(),
            'comment_list': []
        }
    ]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    historical.store_channel_data(channel_id, "Test Channel", channel_stats, test_videos)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    with db_manager.get_connection() as conn:
        cursor = conn.execute("SELECT COUNT(*) FROM channels WHERE channel_id = ?", (channel_id,))
        channel_count = cursor.fetchone()[0]
        
        cursor = conn.execute("SELECT COUNT(*) FROM videos WHERE channel_id = ?", (channel_id,))
        video_count = cursor.fetchone()[0]
        
        cursor = conn.execute("SELECT COUNT(*) FROM comments")
        comment_count = cursor.fetchone()[0]
    
    if channel_count == 1 and video_count == 2 and comment_count == 1:
        print("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: –∫–∞–Ω–∞–ª–æ–≤={channel_count}, –≤–∏–¥–µ–æ={video_count}, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤={comment_count}")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≥—Ä–µ–≥–∞—Ü–∏—é
    historical.calculate_daily_aggregates()
    
    with db_manager.get_connection() as conn:
        cursor = conn.execute("SELECT COUNT(*) FROM daily_channel_stats")
        daily_count = cursor.fetchone()[0]
    
    if daily_count >= 1:
        print("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: {daily_count}")
        return False
    
    # –û—á–∏—â–∞–µ–º
    os.remove(test_db)
    return True

def test_youtube_stats_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å YouTube Stats"""
    print("\nüé¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ YouTube Stats...")
    
    test_db = "test_integration.db"
    if os.path.exists(test_db):
        os.remove(test_db)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
        stats = DatabaseYouTubeStats(test_db)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ë–î —Å–æ–∑–¥–∞–Ω–∞
        db_stats = stats.get_database_stats()
        if 'database' in db_stats:
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {db_stats}")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—ç—à
        test_key = "test_integration"
        test_data = {'integration': 'test'}
        stats._set_cached_data(test_key, test_data, 'test')
        
        cached_data = stats._get_cached_data(test_key, 'test')
        if cached_data == test_data:
            print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫—ç—à–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫—ç—à–∞: {cached_data}")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å API
        try:
            summary = stats.get_summary_stats()
            if isinstance(summary, dict):
                print("‚úÖ API —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            else:
                print(f"‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å API: {type(summary)}")
                return False
        except Exception as e:
            # –û—à–∏–±–∫–∏ YouTube API –æ–∂–∏–¥–∞–µ–º—ã –≤ —Ç–µ—Å—Ç–∞—Ö
            print(f"‚ö†Ô∏è YouTube API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–æ–∂–∏–¥–∞–µ–º–æ): {e}")
        
        # –û—á–∏—â–∞–µ–º
        stats.close()
        os.remove(test_db)
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        if os.path.exists(test_db):
            os.remove(test_db)
        return False

def test_migration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π JSON —Ñ–∞–π–ª
    import json
    test_json = "test_migration.json"
    test_data = {
        'users': {
            '123': {'requests_today': 5, 'last_request': int(time.time())},
            '456': {'requests_today': 2, 'last_request': int(time.time()) - 3600}
        },
        'api_quota': {'used': 100, 'reset_time': int(time.time()) + 86400}
    }
    
    with open(test_json, 'w') as f:
        json.dump(test_data, f)
    
    test_db = "test_migration.db"
    if os.path.exists(test_db):
        os.remove(test_db)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –º–∏–≥—Ä–∞—Ü–∏–µ–π
        stats = DatabaseYouTubeStats(test_db)
        stats.migrate_from_json(test_json)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
        with stats.db_manager.get_connection() as conn:
            cursor = conn.execute("SELECT COUNT(*) FROM users")
            user_count = cursor.fetchone()[0]
            
            cursor = conn.execute("SELECT quota_used FROM api_quota ORDER BY date DESC LIMIT 1")
            quota_row = cursor.fetchone()
            quota_used = quota_row[0] if quota_row else 0
        
        if user_count >= 2:
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã: {user_count}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º backup —Ñ–∞–π–ª
        backup_file = f"{test_json}.backup"
        if os.path.exists(backup_file):
            print("‚úÖ Backup —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω")
            os.remove(backup_file)
        else:
            print("‚ö†Ô∏è Backup —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω")
        
        stats.close()
        os.remove(test_db)
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return False
    
    finally:
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        for file in [test_json, test_db]:
            if os.path.exists(file):
                os.remove(file)

def run_performance_test():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    
    test_db = "test_performance.db"
    if os.path.exists(test_db):
        os.remove(test_db)
    
    db_manager = DatabaseManager(test_db)
    cache = DatabaseCache(db_manager)
    
    # –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–∏ –≤ –∫—ç—à
    start_time = time.time()
    for i in range(1000):
        cache.set(f"perf_key_{i}", {'data': f'value_{i}'}, 'performance')
    write_time = time.time() - start_time
    
    # –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ —á—Ç–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞
    start_time = time.time()
    for i in range(1000):
        cache.get(f"perf_key_{i}", 'performance')
    read_time = time.time() - start_time
    
    print(f"‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:")
    print(f"   –ó–∞–ø–∏—Å—å 1000 –∑–∞–ø–∏—Å–µ–π: {write_time:.3f}—Å ({1000/write_time:.0f} –∑–∞–ø–∏—Å–µ–π/—Å)")
    print(f"   –ß—Ç–µ–Ω–∏–µ 1000 –∑–∞–ø–∏—Å–µ–π: {read_time:.3f}—Å ({1000/read_time:.0f} –∑–∞–ø–∏—Å–µ–π/—Å)")
    
    # –¢–µ—Å—Ç —Ä–∞–∑–º–µ—Ä–∞ –ë–î
    file_size = os.path.getsize(test_db) / 1024  # KB
    print(f"   –†–∞–∑–º–µ—Ä –ë–î —Å 1000 –∑–∞–ø–∏—Å–µ–π: {file_size:.1f} –ö–ë")
    
    os.remove(test_db)
    
    # –•–æ—Ä–æ—à–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏: >500 –∑–∞–ø–∏—Å–µ–π/—Å, <500–ö–ë –Ω–∞ 1000 –∑–∞–ø–∏—Å–µ–π
    return write_time < 2.0 and read_time < 2.0 and file_size < 500

def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    tests = [
        ("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î", test_database_initialization),
        ("–°–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è", test_cache_system), 
        ("–¢—Ä–µ–∫–µ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤", test_request_tracker),
        ("–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ", test_historical_data),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è YouTube Stats", test_youtube_stats_integration),
        ("–ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö", test_migration),
        ("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", run_performance_test)
    ]
    
    results = []
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            print(f"\n{status}: {test_name}")
        except Exception as e:
            print(f"\n‚ùå –û–®–ò–ë–ö–ê –≤ {test_name}: {e}")
            results.append((test_name, False))
    
    print(f"\n{'='*50}")
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ" if result else "‚ùå"
        print(f"  {status} {test_name}")
    
    print(f"\nüéØ –ò–¢–û–ì–û: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({passed/total*100:.1f}%)")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
