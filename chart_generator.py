#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫—Ä–∞—Å–∏–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π YouTube –∫–∞–Ω–∞–ª–æ–≤
–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∏ –≤–∏–∑—É–∞–ª—å–Ω–æ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏
"""

import matplotlib.pyplot as plt
import matplotlib.patches as patches
from matplotlib.patches import FancyBboxPatch
import numpy as np
import seaborn as sns
from datetime import datetime, timedelta
import os
import io
from PIL import Image, ImageDraw, ImageFont
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
plt.style.use('seaborn-v0_8')
sns.set_palette("husl")

logger = logging.getLogger(__name__)

class YouTubeChartGenerator:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
        self.colors = {
            'primary': '#FF0000',      # YouTube –∫—Ä–∞—Å–Ω—ã–π
            'secondary': '#282828',    # –¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π
            'accent': '#00D4FF',       # –ì–æ–ª—É–±–æ–π
            'success': '#00FF88',      # –ó–µ–ª–µ–Ω—ã–π
            'warning': '#FFB800',      # –û—Ä–∞–Ω–∂–µ–≤—ã–π
            'text': '#FFFFFF',         # –ë–µ–ª—ã–π
            'text_secondary': '#CCCCCC' # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤
        self.setup_fonts()
        
    def setup_fonts(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
            self.title_font = plt.matplotlib.font_manager.FontProperties(
                family='Arial', size=24, weight='bold'
            )
            self.subtitle_font = plt.matplotlib.font_manager.FontProperties(
                family='Arial', size=16, weight='normal'
            )
            self.label_font = plt.matplotlib.font_manager.FontProperties(
                family='Arial', size=12, weight='normal'
            )
        except:
            # Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
            self.title_font = None
            self.subtitle_font = None
            self.label_font = None
    
    def create_summary_chart(self, summary_stats, detailed_stats, channels_info):
        """–°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))
        fig.patch.set_facecolor('#1a1a1a')
        
        # 1. –°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ –∫–∞–Ω–∞–ª–∞–º
        self._create_views_chart(ax1, detailed_stats)
        
        # 2. –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –ª–∞–π–∫–æ–≤
        self._create_likes_pie_chart(ax2, detailed_stats)
        
        # 3. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤
        self._create_periods_comparison(ax3, summary_stats)
        
        # 4. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self._create_overview_stats(ax4, summary_stats, channels_info)
        
        # –û–±—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        fig.suptitle('üìä YouTube Analytics Dashboard', 
                    fontsize=28, color='white', fontweight='bold', y=0.95)
        
        plt.tight_layout()
        return fig
    
    def _create_views_chart(self, ax, detailed_stats):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"""
        ax.set_facecolor('#2a2a2a')
        
        channels = [ch['channel_name'] for ch in detailed_stats['today']]
        views = [ch['views'] for ch in detailed_stats['today']]
        
        bars = ax.bar(channels, views, color=self.colors['primary'], alpha=0.8, edgecolor='white', linewidth=2)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
        for bar, value in zip(bars, views):
            height = bar.get_height()
            ax.text(bar.get_x() + bar.get_width()/2., height + max(views)*0.01,
                   f'{value:,}', ha='center', va='bottom', color='white', fontweight='bold')
        
        ax.set_title('üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è', color='white', fontsize=16, fontweight='bold')
        ax.set_ylabel('–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', color='white')
        ax.tick_params(colors='white')
        
        # –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        plt.setp(ax.get_xticklabels(), rotation=15, ha='right')
    
    def _create_likes_pie_chart(self, ax, detailed_stats):
        """–°–æ–∑–¥–∞–µ—Ç –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –ª–∞–π–∫–æ–≤"""
        ax.set_facecolor('#2a2a2a')
        
        channels = [ch['channel_name'] for ch in detailed_stats['today']]
        likes = [ch['likes'] for ch in detailed_stats['today']]
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã —Å –Ω—É–ª–µ–≤—ã–º–∏ –ª–∞–π–∫–∞–º–∏
        non_zero_data = [(ch, lk) for ch, lk in zip(channels, likes) if lk > 0]
        
        if non_zero_data:
            channels_filtered, likes_filtered = zip(*non_zero_data)
            colors = [self.colors['primary'], self.colors['accent'], self.colors['success']][:len(channels_filtered)]
            
            wedges, texts, autotexts = ax.pie(likes_filtered, labels=channels_filtered, 
                                            colors=colors, autopct='%1.1f%%', 
                                            startangle=90, textprops={'color': 'white'})
            
            # –°—Ç–∏–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç
            for autotext in autotexts:
                autotext.set_color('white')
                autotext.set_fontweight('bold')
        else:
            ax.text(0.5, 0.5, '–ù–µ—Ç –ª–∞–π–∫–æ–≤\n–∑–∞ —Å–µ–≥–æ–¥–Ω—è', ha='center', va='center', 
                   color='white', fontsize=14, transform=ax.transAxes)
        
        ax.set_title('üëç –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–∞–π–∫–æ–≤', color='white', fontsize=16, fontweight='bold')
    
    def _create_periods_comparison(self, ax, summary_stats):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤"""
        ax.set_facecolor('#2a2a2a')
        
        periods = ['–°–µ–≥–æ–¥–Ω—è', '–í—á–µ—Ä–∞', '–ù–µ–¥–µ–ª—è', '–í—Å–µ –≤—Ä–µ–º—è']
        views = [
            summary_stats['today']['views'],
            summary_stats['yesterday']['views'],
            summary_stats['week']['views'],
            summary_stats['all_time']['views']
        ]
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        max_views = max(views)
        normalized_views = [v / max_views * 100 if max_views > 0 else 0 for v in views]
        
        bars = ax.bar(periods, normalized_views, 
                     color=[self.colors['primary'], self.colors['accent'], 
                           self.colors['success'], self.colors['warning']],
                     alpha=0.8, edgecolor='white', linewidth=2)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        for bar, value in zip(bars, views):
            height = bar.get_height()
            ax.text(bar.get_x() + bar.get_width()/2., height + 1,
                   f'{value:,}', ha='center', va='bottom', color='white', fontweight='bold')
        
        ax.set_title('üìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤', color='white', fontsize=16, fontweight='bold')
        ax.set_ylabel('–ü—Ä–æ—Å–º–æ—Ç—Ä—ã (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ)', color='white')
        ax.tick_params(colors='white')
    
    def _create_overview_stats(self, ax, summary_stats, channels_info):
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        ax.set_facecolor('#2a2a2a')
        ax.axis('off')
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats_text = f"""
üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê

üé¨ –ö–∞–Ω–∞–ª–æ–≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è: {len(channels_info)}

üìÖ –°–ï–ì–û–î–ù–Ø:
   üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {summary_stats['today']['views']:,}
   üëç –õ–∞–π–∫–∏: {summary_stats['today']['likes']:,}
   üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {summary_stats['today']['comments']:,}
   üé¨ –í–∏–¥–µ–æ: {summary_stats['today'].get('video_count', 0):,}

üìÖ –í–ß–ï–†–ê:
   üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {summary_stats['yesterday']['views']:,}
   üëç –õ–∞–π–∫–∏: {summary_stats['yesterday']['likes']:,}
   üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {summary_stats['yesterday']['comments']:,}
   üé¨ –í–∏–¥–µ–æ: {summary_stats['yesterday'].get('video_count', 0):,}

üìÖ –í–°–ï –í–†–ï–ú–Ø:
   üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {summary_stats['all_time']['views']:,}
   üëç –õ–∞–π–∫–∏: {summary_stats['all_time']['likes']:,}
   üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {summary_stats['all_time']['comments']:,}
   üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {summary_stats['all_time'].get('subscribers', 0):,}
   üé¨ –í–∏–¥–µ–æ: {summary_stats['all_time'].get('videos', 0):,}
        """
        
        ax.text(0.05, 0.95, stats_text, transform=ax.transAxes, fontsize=12,
               verticalalignment='top', color='white', fontfamily='monospace',
               bbox=dict(boxstyle="round,pad=0.5", facecolor='#333333', alpha=0.8))
    
    def create_detailed_channel_chart(self, detailed_stats):
        """–°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –ø–æ –∫–∞–Ω–∞–ª–∞–º"""
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 8))
        fig.patch.set_facecolor('#1a1a1a')
        
        # 1. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º
        self._create_metrics_comparison(ax1, detailed_stats)
        
        # 2. –¢—Ä–µ–Ω–¥—ã –ø–æ –∫–∞–Ω–∞–ª–∞–º
        self._create_channel_trends(ax2, detailed_stats)
        
        fig.suptitle('üì∫ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º', 
                    fontsize=24, color='white', fontweight='bold')
        
        plt.tight_layout()
        return fig
    
    def _create_metrics_comparison(self, ax, detailed_stats):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø–æ –∫–∞–Ω–∞–ª–∞–º"""
        ax.set_facecolor('#2a2a2a')
        
        channels = [ch['channel_name'] for ch in detailed_stats['today']]
        views = [ch['views'] for ch in detailed_stats['today']]
        likes = [ch['likes'] for ch in detailed_stats['today']]
        comments = [ch['comments'] for ch in detailed_stats['today']]
        
        x = np.arange(len(channels))
        width = 0.25
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        max_views = max(views) if views else 1
        max_likes = max(likes) if likes else 1
        max_comments = max(comments) if comments else 1
        
        normalized_views = [v / max_views * 100 for v in views]
        normalized_likes = [l / max_likes * 100 for l in likes]
        normalized_comments = [c / max_comments * 100 for c in comments]
        
        bars1 = ax.bar(x - width, normalized_views, width, label='–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', 
                      color=self.colors['primary'], alpha=0.8)
        bars2 = ax.bar(x, normalized_likes, width, label='–õ–∞–π–∫–∏', 
                      color=self.colors['accent'], alpha=0.8)
        bars3 = ax.bar(x + width, normalized_comments, width, label='–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏', 
                      color=self.colors['success'], alpha=0.8)
        
        ax.set_title('üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø–æ –∫–∞–Ω–∞–ª–∞–º', color='white', fontsize=16, fontweight='bold')
        ax.set_ylabel('–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (%)', color='white')
        ax.set_xticks(x)
        ax.set_xticklabels(channels, rotation=15, ha='right')
        ax.legend()
        ax.tick_params(colors='white')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
        for bars, values in [(bars1, views), (bars2, likes), (bars3, comments)]:
            for bar, value in zip(bars, values):
                height = bar.get_height()
                ax.text(bar.get_x() + bar.get_width()/2., height + 1,
                       f'{value:,}', ha='center', va='bottom', color='white', fontsize=8)
    
    def _create_channel_trends(self, ax, detailed_stats):
        """–°–æ–∑–¥–∞–µ—Ç —Ç—Ä–µ–Ω–¥—ã –ø–æ –∫–∞–Ω–∞–ª–∞–º"""
        ax.set_facecolor('#2a2a2a')
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–µ–≥–æ–¥–Ω—è vs –≤—á–µ—Ä–∞
        today_data = detailed_stats['today']
        yesterday_data = detailed_stats.get('yesterday', [])
        
        channels = [ch['channel_name'] for ch in today_data]
        today_views = [ch['views'] for ch in today_data]
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –≤—á–µ—Ä–∞
        yesterday_views = []
        for channel in channels:
            yesterday_channel = next((ch for ch in yesterday_data if ch['channel_name'] == channel), None)
            yesterday_views.append(yesterday_channel['views'] if yesterday_channel else 0)
        
        x = np.arange(len(channels))
        width = 0.35
        
        bars1 = ax.bar(x - width/2, today_views, width, label='–°–µ–≥–æ–¥–Ω—è', 
                      color=self.colors['primary'], alpha=0.8)
        bars2 = ax.bar(x + width/2, yesterday_views, width, label='–í—á–µ—Ä–∞', 
                      color=self.colors['accent'], alpha=0.8)
        
        ax.set_title('üìà –¢—Ä–µ–Ω–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤', color='white', fontsize=16, fontweight='bold')
        ax.set_ylabel('–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', color='white')
        ax.set_xticks(x)
        ax.set_xticklabels(channels, rotation=15, ha='right')
        ax.legend()
        ax.tick_params(colors='white')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        for bars in [bars1, bars2]:
            for bar in bars:
                height = bar.get_height()
                ax.text(bar.get_x() + bar.get_width()/2., height + max(today_views + yesterday_views)*0.01,
                       f'{int(height):,}', ha='center', va='bottom', color='white', fontsize=8)
    
    def create_infographic(self, summary_stats, detailed_stats, channels_info):
        """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—É—é –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫—É"""
        fig = plt.figure(figsize=(20, 12))
        fig.patch.set_facecolor('#1a1a1a')
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É
        gs = fig.add_gridspec(3, 4, hspace=0.3, wspace=0.3)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_ax = fig.add_subplot(gs[0, :])
        title_ax.axis('off')
        title_ax.text(0.5, 0.5, 'üìä YouTube Analytics Dashboard', 
                     ha='center', va='center', fontsize=32, color='white', 
                     fontweight='bold', transform=title_ax.transAxes)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        self._create_metric_cards(fig, gs[1, :2], summary_stats)
        
        # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
        views_ax = fig.add_subplot(gs[1, 2:])
        self._create_views_chart(views_ax, detailed_stats)
        
        # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –ª–∞–π–∫–æ–≤
        likes_ax = fig.add_subplot(gs[2, :2])
        self._create_likes_pie_chart(likes_ax, detailed_stats)
        
        # –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
        channels_ax = fig.add_subplot(gs[2, 2:])
        self._create_channels_list(channels_ax, channels_info)
        
        return fig
    
    def _create_metric_cards(self, fig, gs, summary_stats):
        """–°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
        ax = fig.add_subplot(gs)
        ax.axis('off')
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –º–µ—Ç—Ä–∏–∫
        metrics = [
            ('üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä—ã —Å–µ–≥–æ–¥–Ω—è', summary_stats['today']['views'], self.colors['primary']),
            ('üëç –õ–∞–π–∫–∏ —Å–µ–≥–æ–¥–Ω—è', summary_stats['today']['likes'], self.colors['accent']),
            ('üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å–µ–≥–æ–¥–Ω—è', summary_stats['today']['comments'], self.colors['success']),
            ('üé¨ –í–∏–¥–µ–æ —Å–µ–≥–æ–¥–Ω—è', summary_stats['today'].get('video_count', 0), self.colors['warning'])
        ]
        
        for i, (title, value, color) in enumerate(metrics):
            x = 0.1 + (i % 2) * 0.4
            y = 0.7 - (i // 2) * 0.4
            
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
            card = FancyBboxPatch((x, y), 0.35, 0.25, 
                                boxstyle="round,pad=0.02", 
                                facecolor=color, alpha=0.8,
                                edgecolor='white', linewidth=2)
            ax.add_patch(card)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            ax.text(x + 0.175, y + 0.15, title, ha='center', va='center', 
                   color='white', fontsize=12, fontweight='bold')
            ax.text(x + 0.175, y + 0.05, f'{value:,}', ha='center', va='center', 
                   color='white', fontsize=16, fontweight='bold')
    
    def _create_channels_list(self, ax, channels_info):
        """–°–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤"""
        ax.set_facecolor('#2a2a2a')
        ax.axis('off')
        
        ax.set_title('üì∫ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã', color='white', fontsize=16, fontweight='bold')
        
        channels_text = ""
        for i, channel in enumerate(channels_info, 1):
            channels_text += f"{i}. {channel['name']}\n"
            if channel.get('username'):
                channels_text += f"   @{channel['username']}\n"
            if channel.get('channel_id'):
                channels_text += f"   ID: {channel['channel_id'][:8]}...\n"
            channels_text += "\n"
        
        ax.text(0.05, 0.95, channels_text, transform=ax.transAxes, fontsize=12,
               verticalalignment='top', color='white', fontfamily='monospace')
    
    def save_chart(self, fig, filename, dpi=300):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –≤ —Ñ–∞–π–ª"""
        try:
            fig.savefig(filename, dpi=dpi, bbox_inches='tight', 
                       facecolor='#1a1a1a', edgecolor='none')
            logger.info(f"–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
            return False
    
    def get_chart_bytes(self, fig):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –∫–∞–∫ –±–∞–π—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram"""
        try:
            buffer = io.BytesIO()
            fig.savefig(buffer, format='png', dpi=300, bbox_inches='tight',
                       facecolor='#1a1a1a', edgecolor='none')
            buffer.seek(0)
            return buffer.getvalue()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–π—Ç–æ–≤ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
            return None

def create_sample_chart():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    generator = YouTubeChartGenerator()
    
    # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    summary_stats = {
        'today': {'views': 648, 'likes': 8, 'comments': 0, 'video_count': 3},
        'yesterday': {'views': 2330, 'likes': 19, 'comments': 0, 'video_count': 4},
        'week': {'views': 2330, 'likes': 19, 'comments': 0, 'video_count': 4},
        'all_time': {'views': 129665, 'likes': 19, 'comments': 0, 'subscribers': 111, 'videos': 31}
    }
    
    detailed_stats = {
        'today': [
            {'channel_name': '–ì–æ–≤–æ—Ä–∏–ª–∫–∏ —Å–æ—Ñ—Ç–æ–º', 'views': 338, 'likes': 3, 'comments': 0},
            {'channel_name': '–ü—Ä–µ–º–∏—è –¥–∞—Ä–≤–∏–Ω–∞', 'views': 3, 'likes': 0, 'comments': 0},
            {'channel_name': '–ú–∏–ª–∏—Ç–∞—Ä–∏', 'views': 307, 'likes': 5, 'comments': 0}
        ],
        'yesterday': [
            {'channel_name': '–ì–æ–≤–æ—Ä–∏–ª–∫–∏ —Å–æ—Ñ—Ç–æ–º', 'views': 2018, 'likes': 19, 'comments': 0},
            {'channel_name': '–ü—Ä–µ–º–∏—è –¥–∞—Ä–≤–∏–Ω–∞', 'views': 312, 'likes': 0, 'comments': 0},
            {'channel_name': '–ú–∏–ª–∏—Ç–∞—Ä–∏', 'views': 0, 'likes': 0, 'comments': 0}
        ]
    }
    
    channels_info = [
        {'name': '–ì–æ–≤–æ—Ä–∏–ª–∫–∏ —Å–æ—Ñ—Ç–æ–º', 'channel_id': 'UCAwrVTXIRxk8FDpyr6T_j7A'},
        {'name': '–ü—Ä–µ–º–∏—è –¥–∞—Ä–≤–∏–Ω–∞', 'channel_id': 'UCru-f82fjfVHWi2COAUR8eQ'},
        {'name': '–ú–∏–ª–∏—Ç–∞—Ä–∏', 'channel_id': 'UC2q4rIDzF9F_oCQkhG2tizw'}
    ]
    
    # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤
    fig1 = generator.create_summary_chart(summary_stats, detailed_stats, channels_info)
    generator.save_chart(fig1, 'youtube_summary_chart.png')
    
    fig2 = generator.create_detailed_channel_chart(detailed_stats)
    generator.save_chart(fig2, 'youtube_detailed_chart.png')
    
    fig3 = generator.create_infographic(summary_stats, detailed_stats, channels_info)
    generator.save_chart(fig3, 'youtube_infographic.png')
    
    print("‚úÖ –ì—Ä–∞—Ñ–∏–∫–∏ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    print("üìÅ –§–∞–π–ª—ã:")
    print("   - youtube_summary_chart.png")
    print("   - youtube_detailed_chart.png") 
    print("   - youtube_infographic.png")

if __name__ == "__main__":
    create_sample_chart()
