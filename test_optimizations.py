#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π YouTube API
"""

import asyncio
import time
from datetime import datetime
from youtube_stats import YouTubeStats
from youtube_stats_optimized import OptimizedYouTubeStats
import config

def test_performance_comparison():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç–∞—Ä–æ–π –∏ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–π"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π YouTube API")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏...")
    old_stats = YouTubeStats()
    
    start_time = time.time()
    try:
        old_summary = old_stats.get_summary_stats()
        old_detailed = old_stats.get_detailed_channel_stats()
        old_today_videos = old_stats.get_today_video_stats()
        old_time = time.time() - start_time
        
        print(f"‚úÖ –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞: {old_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"   –°–µ–≥–æ–¥–Ω—è: {old_summary['today']['views']:,} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤")
        print(f"   –ö–∞–Ω–∞–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(old_detailed['today'])}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏: {e}")
        old_time = float('inf')
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
    print("\nüöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏...")
    new_stats = OptimizedYouTubeStats()
    
    start_time = time.time()
    try:
        new_summary = new_stats.get_summary_stats()
        new_detailed = new_stats.get_detailed_channel_stats()
        new_today_videos = new_stats.get_today_video_stats()
        new_time = time.time() - start_time
        
        print(f"‚úÖ –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞: {new_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"   –°–µ–≥–æ–¥–Ω—è: {new_summary['today']['views']:,} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤")
        print(f"   –ö–∞–Ω–∞–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(new_detailed['today'])}")
        
        # –ê–Ω–∞–ª–∏–∑ —É–ª—É—á—à–µ–Ω–∏–π
        if old_time != float('inf'):
            improvement = ((old_time - new_time) / old_time) * 100
            print(f"\nüìà –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {improvement:.1f}%")
            print(f"üí° –≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏: {old_time - new_time:.2f} —Å–µ–∫—É–Ω–¥")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏: {e}")

def test_batch_requests():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ batch –∑–∞–ø—Ä–æ—Å–æ–≤"""
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ batch –∑–∞–ø—Ä–æ—Å–æ–≤ –∫–∞–Ω–∞–ª–æ–≤...")
    
    new_stats = OptimizedYouTubeStats()
    channel_ids = [channel['channel_id'] for channel in config.CHANNELS]
    
    start_time = time.time()
    batch_results = new_stats.get_batch_channel_stats(channel_ids)
    batch_time = time.time() - start_time
    
    successful_channels = sum(1 for result in batch_results.values() if result is not None)
    
    print(f"‚úÖ Batch –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞: {batch_time:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"   –ö–∞–Ω–∞–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {successful_channels}/{len(channel_ids)}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    for channel_id, stats in batch_results.items():
        channel_name = next((c['name'] for c in config.CHANNELS if c['channel_id'] == channel_id), 'Unknown')
        if stats:
            print(f"   üì∫ {channel_name}: {stats['total_views']:,} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤, {stats['subscribers']:,} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
        else:
            print(f"   ‚ùå {channel_name}: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")

def test_caching():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\nüíæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    new_stats = OptimizedYouTubeStats()
    
    # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (–±–µ–∑ –∫—ç—à–∞)
    print("   –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫—ç—à–∞)...")
    start_time = time.time()
    first_result = new_stats.get_summary_stats()
    first_time = time.time() - start_time
    
    # –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (—Å –∫—ç—à–µ–º)
    print("   –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (–∏–∑ –∫—ç—à–∞)...")
    start_time = time.time()
    second_result = new_stats.get_summary_stats()
    second_time = time.time() - start_time
    
    cache_speedup = ((first_time - second_time) / first_time) * 100 if first_time > 0 else 0
    
    print(f"‚úÖ –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å: {first_time:.2f} —Å–µ–∫")
    print(f"‚úÖ –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (–∫—ç—à): {second_time:.2f} —Å–µ–∫")
    print(f"üöÄ –£—Å–∫–æ—Ä–µ–Ω–∏–µ –æ—Ç –∫—ç—à–∞: {cache_speedup:.1f}%")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
    if first_result['today']['views'] == second_result['today']['views']:
        print("‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω—ã —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º–∏")
    else:
        print("‚ö†Ô∏è –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ –¥–∞–Ω–Ω—ã—Ö –∫—ç—à–∞")

async def test_async_performance():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    
    new_stats = OptimizedYouTubeStats()
    
    start_time = time.time()
    result = await new_stats.get_optimized_summary_stats()
    async_time = time.time() - start_time
    
    print(f"‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞: {async_time:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(result['detailed']['today'])}")
    print(f"   –û–±—â–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {result['summary']['today']['views']:,}")

def show_optimization_summary():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º"""
    print("\nüìã –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:")
    print("=" * 50)
    
    optimizations = [
        "‚úÖ Batch –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ (—ç–∫–æ–Ω–æ–º–∏—è API –∫–≤–æ—Ç—ã)",
        "‚úÖ –£–º–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–∞–∑–Ω—ã–º–∏ TTL:",
        "   ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–æ–≤: 1 —á–∞—Å",
        "   ‚Ä¢ –í–∏–¥–µ–æ –¥–∞–Ω–Ω—ã–µ: 15 –º–∏–Ω—É—Ç", 
        "   ‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: 30 –º–∏–Ω—É—Ç",
        "‚úÖ –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ",
        "‚úÖ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ async –∑–∞–ø—Ä–æ—Å—ã",
        "‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤",
        "‚úÖ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º API"
    ]
    
    for opt in optimizations:
        print(f"  {opt}")
    
    print(f"\nüí° –û–∂–∏–¥–∞–µ–º—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:")
    print(f"  ‚Ä¢ –°–Ω–∏–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API –∫–≤–æ—Ç—ã –Ω–∞ 60-80%")
    print(f"  ‚Ä¢ –£—Å–∫–æ—Ä–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ 2-5 —Ä–∞–∑")
    print(f"  ‚Ä¢ –õ—É—á—à–∞—è –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç—å –±–æ—Ç–∞")
    print(f"  ‚Ä¢ –ë–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    show_optimization_summary()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    test_performance_comparison()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º batch –∑–∞–ø—Ä–æ—Å—ã
    test_batch_requests()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    test_caching()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º async (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(test_async_performance())
        loop.close()
    except Exception as e:
        print(f"‚ö†Ô∏è Async —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ: {e}")
    
    print(f"\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ OptimizedYouTubeStats –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")

if __name__ == "__main__":
    main()
