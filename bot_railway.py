import logging
import sys
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
import os

# –í—ã–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ä–µ–¥—ã
if os.getenv("RAILWAY_STATIC_URL"):
    import config_railway as config
else:
    import config

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –≤–µ—Ä—Å–∏—é –±–µ–∑ aiohttp
from youtube_stats import YouTubeStats
from request_tracker import RequestTracker

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
try:
    logger.info("Starting YouTube Stats Bot for Railway...")
    logger.info(f"Telegram Token: {'Set' if config.TELEGRAM_TOKEN else 'Not set'}")
    logger.info(f"YouTube API Key: {'Set' if config.YOUTUBE_API_KEY else 'Not set'}")
    logger.info(f"Admin ID: {config.ADMIN_ID}")
    logger.info(f"Channels to monitor: {len(config.CHANNELS)}")
    logger.info(f"Railway Mode: {getattr(config, 'RAILWAY_MODE', False)}")
    logger.info(f"Database Path: {getattr(config, 'DATABASE_PATH', 'default')}")
except Exception as e:
    logger.error(f"Configuration error: {e}")
    sys.exit(1)

def get_error_message(e):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
    error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
    error_str = str(e).lower()
    
    if "quotaexceeded" in error_str or "quota exceeded" in error_str:
        error_message = "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ YouTube API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    elif "accessnotconfigured" in error_str or "access not configured" in error_str:
        error_message = "YouTube API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–∞."
    elif "403" in error_str or "forbidden" in error_str:
        error_message = "–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ YouTube API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á."
    elif "400" in error_str or "bad request" in error_str:
        error_message = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ YouTube API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
    elif "500" in error_str or "internal server error" in error_str:
        error_message = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ YouTube API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    elif "network" in error_str or "connection" in error_str:
        error_message = "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ YouTube API."
    elif "timeout" in error_str:
        error_message = "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç YouTube API."
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.error(f"Detailed error: {e}")
    return error_message

class YouTubeStatsBot:
    def __init__(self):
        self.youtube_stats = YouTubeStats()
        self.request_tracker = RequestTracker()
        logger.info("YouTubeStatsBot initialized for Railway")
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
        can_request, message_text = self.request_tracker.can_make_request(user_id)
        if not can_request:
            await update.message.reply_text(f"‚ö†Ô∏è {message_text}")
            return
        
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
            loading_message = await update.message.reply_text("üìä –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–Ω–∞–ª–∞–º
            summary_stats = self.youtube_stats.get_summary_stats()
            today_video_stats = self.youtube_stats.get_today_video_stats()
            detailed_stats = self.youtube_stats.get_detailed_channel_stats()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_stats = self.request_tracker.get_user_stats(user_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–≤–æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            message = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–º –∫–∞–Ω–∞–ª–∞–º:**\n\n"
            message += f"–ó–∞ —Å–µ–≥–æ–¥–Ω—è: {summary_stats['today']['views']:,}üëÅÔ∏è | {summary_stats['today']['likes']:,}üëç | {summary_stats['today']['comments']:,}üí¨\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–Ω–∞–ª–∞–º –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            for channel_data in detailed_stats['today']:
                message += f"‚Ä¢ {channel_data['channel_name']}: {channel_data['views']:,}üëÅÔ∏è | {channel_data['likes']:,}üëç | {channel_data['comments']:,}üí¨\n"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—á–µ—Ä–∞
            if 'yesterday' in summary_stats and summary_stats['yesterday']:
                message += f"\n–ó–∞ –≤—á–µ—Ä–∞: {summary_stats['yesterday']['views']:,}üëÅÔ∏è | {summary_stats['yesterday']['likes']:,}üëç | {summary_stats['yesterday']['comments']:,}üí¨\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–Ω–∞–ª–∞–º –∑–∞ –≤—á–µ—Ä–∞
                if 'yesterday' in detailed_stats and detailed_stats['yesterday']:
                    for channel_data in detailed_stats['yesterday']:
                        message += f"‚Ä¢ {channel_data['channel_name']}: {channel_data['views']:,}üëÅÔ∏è | {channel_data['likes']:,}üëç—å {channel_data['comments']:,}üí¨\n"
            else:
                message += f"\n–ó–∞ –≤—á–µ—Ä–∞: –î–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n"
            
            message += f"\n–ó–∞ –Ω–µ–¥–µ–ª—é: {summary_stats['week']['views']:,}üëÅÔ∏è | {summary_stats['week']['likes']:,}üëç | {summary_stats['week']['comments']:,}üí¨\n"
            message += f"–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è: {summary_stats['all_time']['views']:,}üëÅÔ∏è | {summary_stats['all_time']['likes']:,}üëç | {summary_stats['all_time']['comments']:,}üí¨\n\n"
            message += f"üìπ –í–∏–¥–µ–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today_video_stats['uploaded']} –∑–∞–≥—Ä—É–∂–µ–Ω–æ, {today_video_stats['scheduled']} –≤ –æ—Ç–ª–æ–∂–∫–µ\n"
            message += f"–ö–∞–Ω–∞–ª–æ–≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è: {len(config.CHANNELS)}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–∞—Ö
            message += f"üìà **–ó–∞–ø—Ä–æ—Å–æ–≤: {user_stats['requests_today']}/{user_stats['requests_limit']}**\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ —Å –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞–º–∏
            channel_links = []
            for channel in config.CHANNELS:
                channel_name = channel['name']
                channel_username = channel.get('username', '')
                if channel_username:
                    channel_link = f"https://www.youtube.com/{channel_username}"
                    channel_links.append(f"[{channel_name}]({channel_link})")
                else:
                    channel_links.append(channel_name)
            
            message += f"({', '.join(channel_links)})"
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
            keyboard = [
                [
                    InlineKeyboardButton("–ó–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="stats_today"),
                    InlineKeyboardButton("–ó–∞ –≤—á–µ—Ä–∞", callback_data="stats_yesterday")
                ],
                [
                    InlineKeyboardButton("–ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="stats_week"),
                    InlineKeyboardButton("–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è", callback_data="stats_all_time")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
            self.request_tracker.record_request(user_id, "start")
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await loading_message.delete()
            await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown', disable_web_page_preview=True)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await update.message.reply_text(get_error_message(e))
    
    async def stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
        
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
        can_request, message_text = self.request_tracker.can_make_request(user_id)
        if not can_request:
            await update.message.reply_text(f"‚ö†Ô∏è {message_text}")
            return
        
        await update.message.reply_text("–ü–æ–ª—É—á–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
        
        try:
            daily_stats = self.youtube_stats.get_daily_stats()
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
            self.request_tracker.record_request(user_id, "stats")
            
            if not daily_stats:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            message = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
            
            for channel_data in daily_stats:
                channel_name = channel_data['channel_name']
                channel_username = channel_data.get('channel_username', '')
                daily_views = channel_data['daily_views']
                daily_likes = channel_data['daily_likes']
                daily_comments = channel_data['daily_comments']
                videos = channel_data['videos']
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
                if channel_username:
                    channel_link = f"https://www.youtube.com/{channel_username}"
                    message += f"üìä [{channel_name}]({channel_link}) - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n\n"
                else:
                    message += f"üìä {channel_name} - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–º—É –≤–∏–¥–µ–æ
                if videos:
                    message += f"üìπ –í–∏–¥–µ–æ ({len(videos)}):\n"
                    for i, video in enumerate(videos, 1):
                        title = video['title'][:40] + "..." if len(video['title']) > 40 else video['title']
                        message += f"{i}. {title} | {video['views']:,}üëÅÔ∏è {video['likes']:,}üëç {video['comments']:,}üí¨\n"
                    
                    message += f"\nüìà –ò—Ç–æ–≥–æ: {daily_views:,}üëÅÔ∏è {daily_likes:,}üëç {daily_comments:,}üí¨\n"
                else:
                    message += "üìπ –í–∏–¥–µ–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
                
                message += "\n" + "‚îÄ" * 30 + "\n\n"
            
            # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            if len(message) > 4096:
                parts = [message[i:i+4096] for i in range(0, len(message), 4096)]
                for part in parts:
                    await update.message.reply_text(part, parse_mode='Markdown', disable_web_page_preview=True)
            else:
                await update.message.reply_text(message, parse_mode='Markdown', disable_web_page_preview=True)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await update.message.reply_text(get_error_message(e))
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        
        help_text = """
ü§ñ **YouTube Analytics Bot (Railway Version)**

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
/stats - –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∫–ª—é—á–∞–µ—Ç:**
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã, –ª–∞–π–∫–∏, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –∑–∞ –ø–µ—Ä–∏–æ–¥
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ –∫–∞–Ω–∞–ª–∞–º

**–õ–∏–º–∏—Ç—ã:**
‚Ä¢ 15 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ 2 –º–∏–Ω—É—Ç—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
‚Ä¢ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö 30 –º–∏–Ω—É—Ç

üöÄ **–†–∞–∑–≤–µ—Ä–Ω—É—Ç–æ –Ω–∞ Railway**
        """
        await update.message.reply_text(help_text, parse_mode='Markdown')

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        logger.info("Initializing YouTube Stats Bot for Railway...")
        bot = YouTubeStatsBot()
        logger.info("Bot instance created successfully")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        logger.info("Creating Telegram application...")
        application = Application.builder().token(config.TELEGRAM_TOKEN).build()
        logger.info("Telegram application created successfully")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        logger.info("Adding command handlers...")
        application.add_handler(CommandHandler("start", bot.start))
        application.add_handler(CommandHandler("stats", bot.stats))
        application.add_handler(CommandHandler("help", bot.help_command))
        logger.info("All handlers added successfully")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("Starting bot polling...")
        print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Railway...")
        application.run_polling(allowed_updates=Update.ALL_TYPES)
        
    except Exception as e:
        logger.error(f"Failed to start bot: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()
